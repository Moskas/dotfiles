:qconfig.load_autoconfig()

import subprocess
import os
from qutebrowser.api import interceptor

c.tabs.background = True
c.new_instance_open_target = 'window'
#c.url.start_pages(https://www.google.com)
c.downloads.position = 'bottom'
#c.spellcheck.languages = ['en-US']
# Fonts
c.fonts.prompts = '12pt "MesloLGS NF"'
c.fonts.statusbar = '12pt "MesloLGS NF"'
c.fonts.completion.entry = '12pt "MesloLGS NF"'

# Keybinds
config.bind('W','hint links spawn --detach mpv {hint-url}')
config.bind('St','hint links spawn --detach streamlink {hint-url} best')
config.bind('Y','hint links spawn alacritty -e yt-dlp {hint-url}')
config.bind('ce', 'config-edit')
config.bind('B', 'spawn --userscript qute-bitwarden')

config.bind('<Shift-Left>', 'tab-prev')
config.bind('<Shift-Down>', 'back')
config.bind('<Shift-Up>', 'forward')
config.bind('<Shift-Right>', 'tab-next')



# Editor
c.editor.command = ['emacs', '{}']

# Colorscheme
config.source('gruvbox.py')

# Youtube adblock
def filter_yt(info: interceptor.Request):
    url = info.request_url
    if (
            url.host() == "www.youtube.com"
            and url.path() == "/get_video_info"
            and "&adformat=" in url.query()
    ):
        info.block()

interceptor.register(filter_yt)

c.content.blocking.enabled = True
c.content.blocking.hosts.lists = ['https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts']
c.content.blocking.method = 'both'

c.content.blocking.adblock.lists = [ \
        "https://raw.githubusercontent.com/notracking/hosts-blocklists/master/hostnames.txt", \
        "https://raw.githubusercontent.com/notracking/hosts-blocklists/master/adblock/adblock.txt", \
        "https://easylist.to/easylist/easylist.txt", \
        "https://easylist.to/easylist/easyprivacy.txt", \
        "https://secure.fanboy.co.nz/fanboy-cookiemonster.txt", \
        "https://easylist.to/easylist/fanboy-annoyance.txt", \
        "https://secure.fanboy.co.nz/fanboy-annoyance.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/annoyances.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters-2020.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/unbreak.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/resource-abuse.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/privacy.txt", \
        "https://github.com/uBlockOrigin/uAssets/raw/master/filters/filters.txt", \
        "https://ewpratten.retrylife.ca/youtube_ad_blocklist/hosts.ipv4.txt" \
        ]


# ====================== xresources ======================= {{{
# taken from https://qutebrowser.org/doc/help/configuring.html
def read_xresources(prefix):
    """
    read settings from xresources
    """
    props = {}
    x = subprocess.run(["xrdb", "-query"], stdout=subprocess.PIPE)
    lines = x.stdout.decode().split("\n")
    for line in filter(lambda l: l.startswith(prefix), lines):
        prop, _, value = line.partition(":\t")
        props[prop] = value
    return props


xresources = read_xresources("*")

c.colors.statusbar.normal.bg = xresources["*background"]
c.colors.statusbar.command.bg = xresources["*background"]
c.colors.statusbar.command.fg = xresources["*foreground"]
c.colors.statusbar.normal.fg = xresources["*foreground"]
c.statusbar.show = "in-mode"

c.colors.tabs.even.bg = xresources["*background"]
c.colors.tabs.odd.bg = xresources["*background"]
c.colors.tabs.even.fg = xresources["*foreground"]
c.colors.tabs.odd.fg = xresources["*foreground"]
c.colors.tabs.selected.even.bg = xresources["*color8"]
c.colors.tabs.selected.odd.bg = xresources["*color8"]
c.colors.hints.bg = xresources["*background"]
c.colors.hints.fg = xresources["*foreground"]
c.tabs.show = "multiple"

# change title format
c.tabs.title.format = "{audio}{current_title}"
# fonts
c.fonts.web.size.default = 16

c.colors.tabs.indicator.stop = xresources["*color14"]
c.colors.completion.odd.bg = xresources["*background"]
c.colors.completion.even.bg = xresources["*background"]
c.colors.completion.fg = xresources["*foreground"]
c.colors.completion.category.bg = xresources["*background"]
c.colors.completion.category.fg = xresources["*foreground"]
c.colors.completion.item.selected.bg = xresources["*background"]
c.colors.completion.item.selected.fg = xresources["*foreground"]

# If not in light theme
if xresources["*background"] != "#ffffff":
    c.qt.args = ['blink-settings=darkMode=4']
    #c.colors.webpage.prefers_color_scheme_dark = True
    c.colors.webpage.darkmode.enabled = True
    c.hints.border = "1px solid #FFFFFF"
